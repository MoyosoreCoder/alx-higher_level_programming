
===================================
How to use 0-add_integer.py to test
===================================

This modules talked about the addition of two integers or two
floating numbers using the function ``0-add_integer.py``

Usage
=====

``0-add_integer.py(...)`` returns addition of its two arguments using ``+``
 for the operation

::	

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(2, 3)
5

::

>>> add_integer(2, -3)
-1

The function also works with floating-point values.

::

>>> add_integer(2.0, 3.0)
5

Note that floats are casted to ints before addition is performed.

::

>>> add_integer(2.9, 0.2)
2

::

>>> add_integer(-2.9, -0.2)
-2

Floating and non-floating point values can be combined.

::

>>> add_integer(2.3, -3)
-1

The second argument is optional - by default, it is 98.

::

>>> add_integer(2)
100

Not a numbers
==============


``add_integer(...)`` expects that both arguments are either integers or floats.
If the argument is a non-integer and non-float, a TypeError is raised:

::

>>> add_integer("hello", "there")
Traceback (most recent call last):
TypeError: a must be an integer

::

>>> add_integer(4, "School")
Traceback (most recent call last):
TypeError: b must be an integer

::

>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer
